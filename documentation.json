{
    "pipes": [],
    "interfaces": [
        {
            "name": "CarModel",
            "id": "interface-CarModel-306464b0fc47cdc940c9aef36cc885b941b060a1d15f10077e935e69e1e29cd6668052777bd15436ec5e4852460a3a261ccf6c1472fe7a437a5db06dbd57a10d",
            "file": "src/app/models/car.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CarModel{\n  id: number;\n  name: string\n}\n\n// export class Car {\n//    private _id: number;\n//    private _name: string;\n//\n//\n//   constructor(id: number, name: string) {\n//     this._id = id;\n//     this._name = name;\n//   }\n//\n//   get id(): number {\n//     return this._id;\n//   }\n//\n//   set id(value: number) {\n//     this._id = value;\n//   }\n//\n//   get name(): string {\n//     return this._name;\n//   }\n//\n//   set name(value: string) {\n//     this._name = value;\n//   }\n// }\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EntryModel",
            "id": "interface-EntryModel-02d11a1648ddc33cc555a19d006477b1c5bc7cd1a4602035f6e557a77b63fb69774e3e942b506dc85b18c38778385280f8e54dbaeb9ebbf93a5fc2833287306b",
            "file": "src/app/models/entry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TrackModel, TrackModelPost} from \"./track\";\nimport {CarModel} from \"./car\";\nimport {PlayerModel, PlayerModelPost} from \"./player\";\n\nexport interface EntryModel{\n  id: number;\n  entryTime: number;\n  date: Date;\n  car: CarModel;\n  score: number;\n  player: PlayerModel;\n  track: TrackModel;\n}\n\nexport type EntryModelPostForm = {\n  id: number;\n  entryTime: number;\n  date: Date;\n  car: CarModel;\n  score: number;\n  player: PlayerModelPost;\n  track: TrackModelPost;\n}\n\nexport type EntryModelPost = Partial<EntryModel> & { id: number }\n\n\n\n// export class Entry {\n//   private _id: number;\n//   private _entrytime: string;\n//   private _date: Date;\n//   private _car: Car | undefined | null;\n//   private _points: number | null;\n//   private _playername: string\n//   private _track: Track | undefined | null;\n//\n//\n//   constructor(id: number, entrytime: string, date: Date, car: Car | undefined | null, points: number | null, playername: string, track: Track | undefined | null) {\n//     this._id = id;\n//     this._entrytime = entrytime;\n//     this._date = date;\n//     this._car = car;\n//     this._points = points;\n//     this._playername = playername;\n//     this._track = track;\n//   }\n//\n//   get playername(): string {\n//     return this._playername;\n//   }\n//\n//   set playername(value: string) {\n//     this._playername = value;\n//   }\n//\n//\n//   get track(): Track | undefined | null {\n//     return this._track;\n//   }\n//\n//   set track(value: Track | undefined | null) {\n//     this._track = value;\n//   }\n//\n//   get id(): number {\n//     return this._id;\n//   }\n//\n//   set id(value: number) {\n//     this._id = value;\n//   }\n//\n//   get date(): Date {\n//     return this._date;\n//   }\n//\n//   set date(value: Date) {\n//     this._date = value;\n//   }\n//\n//   get car(): Car | undefined | null {\n//     return this._car;\n//   }\n//   set car(value:Car | undefined | null) {\n//     this._car = value;\n//   }\n//\n//\n//   get entrytime(): string {\n//     return this._entrytime;\n//   }\n//\n//   set entrytime(value: string) {\n//     this._entrytime = value;\n//   }\n//\n//   get points(): number | null {\n//     return this._points;\n//   }\n//\n//   set points(value: number | null) {\n//     this._points = value;\n//   }\n// }\n",
            "properties": [
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarModel",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "entryTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "track",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlayerModel",
            "id": "interface-PlayerModel-79979fa03e21d9ce27cb8176a0439b45b76d5ac4598cbdf5de8fc55299c516a0ceb27d5016e33286af510196d32671a9dc43a270dc8785f930aaa7e69eb93e76",
            "file": "src/app/models/player.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TrackModel} from \"./track\";\r\n\r\nexport interface PlayerModel{\r\n  id: number,\r\n  name: string\r\n}\r\n\r\nexport type PlayerModelPost = Partial<PlayerModel> & {name: string}\r\n// export class Player{\r\n//   private _id: number;\r\n//   private _name: string;\r\n//\r\n//\r\n//   constructor(id: number, name: string) {\r\n//     this._id = id;\r\n//     this._name = name;\r\n//   }\r\n//\r\n//\r\n//   get id(): number {\r\n//     return this._id;\r\n//   }\r\n//\r\n//   set id(value: number) {\r\n//     this._id = value;\r\n//   }\r\n//\r\n//   get name(): string {\r\n//     return this._name;\r\n//   }\r\n//\r\n//   set name(value: string) {\r\n//     this._name = value;\r\n//   }\r\n// }\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TrackModel",
            "id": "interface-TrackModel-5c9319c98d5f12e56d9b5c22b34a215e0b05dfbb59edd2575b3be9ce23aeae78131b148811085ad484381d6cc9204ef97bf2a070199c504f1daac5d608269c9e",
            "file": "src/app/models/track.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EntryModel} from \"./entry\";\r\n\r\nexport interface TrackModel {\r\n  id: number;\r\n  name: string;\r\n  location: string;\r\n  length: number;\r\n  entryList: EntryModel[];\r\n}\r\n\r\nexport type TrackModelPost = Partial<TrackModel> & {id: number}\r\n\r\n// export class Track{\r\n//   private _id: number;\r\n//   private _name: string;\r\n//   private _location: string;\r\n//   private _length: number;\r\n//   private _entryList: Entry[] | null;\r\n//\r\n//\r\n//   constructor(id: number, name: string, location: string, length: number, entryList: [] | null) {\r\n//     this._id = id;\r\n//     this._name = name;\r\n//     this._location = location;\r\n//     this._length = length;\r\n//     this._entryList = entryList;\r\n//   }\r\n//\r\n//   get id(): number {\r\n//     return this._id;\r\n//   }\r\n//\r\n//   set id(value: number) {\r\n//     this._id = value;\r\n//   }\r\n//\r\n//   get name(): string {\r\n//     return this._name;\r\n//   }\r\n//\r\n//   set name(value: string) {\r\n//     this._name = value;\r\n//   }\r\n//\r\n//   get entries(): Entry[] | null{\r\n//     return this._entryList;\r\n//   }\r\n//\r\n//   set entries(value: Entry[] | null) {\r\n//     this._entryList = value;\r\n//   }\r\n//\r\n//   get location(): string {\r\n//     return this._location;\r\n//   }\r\n//\r\n//   set location(value: string) {\r\n//     this._location = value;\r\n//   }\r\n//\r\n//   get length(): number {\r\n//     return this._length;\r\n//   }\r\n//\r\n//   set length(value: number) {\r\n//     this._length = value;\r\n//   }\r\n// }\r\n",
            "properties": [
                {
                    "name": "entryList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntryModel[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CarSbService",
            "id": "injectable-CarSbService-1065d3523ce5fd4a092d4d517a56df92f6fb854a0d1064543d000e4a6e376de6ea403792a54ba2aeeb33ca885a7903821a55b5e77918d01923c54e6b78cf74f2",
            "file": "src/app/services/car-sb.service.ts",
            "properties": [
                {
                    "name": "cars",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarModel[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "determineIfPostOrPut",
                    "args": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "CarModel[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restGetEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CarModel[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restPostCar",
                    "args": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restPutCar",
                    "args": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ErrorHandler, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {CarModel} from \"../models/car\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarSbService {\n  private cars: CarModel[] = [];\n  constructor(private httpClient: HttpClient) {\n    this.restGetEntries().subscribe(\n      responseData => this.cars = responseData,\n      error => ErrorHandler.apply(error)\n    )\n  }\n\n  findAll(): CarModel[]{\n    return this.cars;\n  }\n\n  determineIfPostOrPut(car: CarModel){\n    for (let i = 0; i < this.cars.length; i++){\n      if (car.id == this.cars[i].id){\n        this.restPutCar(car)\n        return;\n      }\n      else this.restPostCar(car)\n    }\n  }\n\n  restGetEntries(): Observable<CarModel[]>{\n    return this.httpClient.get<CarModel[]>(`http://localhost:8080/car`)\n      .pipe(\n        map(responseData => {\n          const carArray: CarModel[] = [];\n\n          for (const key in responseData){\n            carArray.push(responseData[key])\n          }\n          return carArray;\n        })\n      )\n  }\n\n  restPostCar(car: CarModel){\n    this.httpClient.post<CarModel>(`http://localhost:8082/car`, JSON.stringify(car), {headers: new HttpHeaders(\n        {'Content-Type': 'application/json',\n        }\n      ), responseType: 'json', observe: 'response'}).subscribe(responseData => {\n      console.log(responseData)\n    })\n  }\n\n  restPutCar(car: CarModel){\n    return this.httpClient.put<CarModel>(`http://localhost:8082/car/${car.id}`, car, {headers: new HttpHeaders(\n        {'Content-Type': 'application/json'}\n      ), responseType: 'json', observe: 'response'\n    }).subscribe(\n      responseData =>{\n        console.log(responseData)\n      }\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EntrySbService",
            "id": "injectable-EntrySbService-8233a5676198a797a06d8017efe9c4ce255102bb3f96aa7b9281b547c64f590d982f929618a2d489f0e8178037f5cf5a121a555cc722807510e010dfa401d63b",
            "file": "src/app/services/entry-sb.service.ts",
            "properties": [
                {
                    "name": "entries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntryModel[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "determineIfPostOrPut",
                    "args": [
                        {
                            "name": "entry",
                            "type": "EntryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "EntryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restGetEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntryModel[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restPostEntry",
                    "args": [
                        {
                            "name": "entry",
                            "type": "EntryModelPostForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "EntryModelPostForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restPutEntry",
                    "args": [
                        {
                            "name": "entry",
                            "type": "EntryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "EntryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ErrorHandler, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {PlayerSbService} from \"./player-sb.service\";\nimport {EntryModel, EntryModelPost, EntryModelPostForm} from \"../models/entry\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntrySbService {\n  private entries: EntryModel[] = [];\n  constructor(private httpClient: HttpClient, private playerService: PlayerSbService) {\n    this.restGetEntries().subscribe(\n      responseData => this.entries = responseData,\n      error => ErrorHandler.apply(error)\n    )\n  }\n\n  determineIfPostOrPut(entry: EntryModel){\n    for (let i = 0; i < this.entries.length; i++){\n      if (entry.id == this.entries[i].id){\n        this.restPutEntry(entry)\n        return;\n      }\n      else this.restPostEntry(entry)\n    }\n  }\n\n  restGetEntries(): Observable<EntryModel[]>{\n    return this.httpClient.get<EntryModel[]>(`http://localhost:8080/entry`)\n      .pipe(\n        map(responseData => {\n          const entryArray: EntryModel[] = [];\n\n          for (const key in responseData){\n            entryArray.push(responseData[key])\n          }\n          return entryArray;\n        })\n      )\n  }\n\n  restPostEntry(entry: EntryModelPostForm){\n    console.log(entry)\n    // const body: EntryModel = {\n    //   \"entryTime\": entry.entryTime,\n    //   \"date\": entry.date,\n    //   \"score\": entry.score,\n    //   \"player\":{\n    //     \"id\": 1\n    //   },\n    //   \"track\":{\n    //     \"id\": entry.track?.id\n    //   }\n    // }\n    this.httpClient.post<EntryModel>('http://localhost:8082/entry', entry, {headers: new HttpHeaders(\n        {'Content-Type': 'application/json',\n        }\n      ), responseType: 'json', observe: 'response'}).subscribe(responseData => {\n        console.log(responseData)\n    })\n  }\n\n  restPutEntry(entry: EntryModel){\n    return this.httpClient.put<EntryModel>(`http://localhost:8082/entry/${entry.id}`, entry, {headers: new HttpHeaders(\n        {'Content-Type': 'application/json'}\n      ), responseType: 'json', observe: 'response'\n    }).subscribe(\n      responseData =>{\n        console.log(responseData)\n      }\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerSbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerSbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EntryserviceService",
            "id": "injectable-EntryserviceService-1f4cb095df81d4535ee26fd65e47c7b160974e02b3a90d291ef21676fea6020400421d6d254ad42c7ff0549990ac8d60ca3cc5ed08eb77112234e61098777f27",
            "file": "src/app/services/entryservice.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {EntryModel} from \"../models/entry\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntryserviceService {\n  // public entries: EntryModel[];\n  //\n  // constructor() {\n  //   this.entries = []\n  // }\n  //\n  // findAll(): EntryModel[] | any {\n  //   return this.entries;\n  // }\n  //\n  // findById(id: number): EntryModel | any {\n  //   let indexOfEntry = this.entries. findIndex((entry: EntryModel) => {\n  //     return entry.id == id\n  //   })\n  //   if (this.entries[indexOfEntry] == null) return null;\n  //   return this.entries[indexOfEntry]\n  // }\n  //\n  // calculateRankingAndPoints(entriesList: EntryModel[]) {\n  //   let p   oints = 18;\n  //\n  //   for (let entry of entriesList) {\n  //     if (entriesList.length < 15) points == 10;\n  //     let timeArray = entry.entrytime.split(\":\", 3)\n  //     let timeString = timeArray[0] + timeArray[1] + timeArray[2]\n  //     entriesList.sort((a, b) =>\n  //       parseInt(a.entrytime.split(\":\").join(\"\")) - parseInt(b.entrytime.split(\":\").join(\"\")))\n  //\n  //   }\n  // }\n  //\n  // saveOrUpdate(entry: Entry) {\n  //   if (this.entries.length == 0) this.save(entry)\n  //   for (let i = 0; i < this.entries.length; i++) {\n  //     if (entry.playername != this.entries[i].playername) {\n  //       this.save(entry)\n  //     }\n  //     this.update(entry)\n  //   }\n  // }\n  //\n  // save(entry: Entry): Entry | any {\n  //   this.entries.push(entry)\n  // }\n  //\n  // update(entry: Entry): Entry | any {\n  //   let toBeUpdatedEntry = this.entries.find(this.findIndextoUpdate, entry.playername)\n  //   let index = this.entries.indexOf(toBeUpdatedEntry!)\n  //   console.log(toBeUpdatedEntry)\n  //\n  //   console.log(this.entries[index].id)\n  //   this.entries[index] = entry;\n  //\n  // }\n  //\n  // findIndextoUpdate(entry: any) {\n  //   return entry.playername === this;\n  // }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PlayerSbService",
            "id": "injectable-PlayerSbService-9a7bd46cbeaa79995400092123ca94d34859a0e9e3fa142480fc74600b75da14188f74c1b9fe5646075652f7e3cecda7afcf89c03502148994cf2e130a2b6646",
            "file": "src/app/services/player-sb.service.ts",
            "properties": [
                {
                    "name": "players",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerModel[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "restGetPlayerId",
                    "args": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restGetPlayers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PlayerModel[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restPostPlayer",
                    "args": [
                        {
                            "name": "player",
                            "type": "PlayerModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "player",
                            "type": "PlayerModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {PlayerModel} from \"../models/player\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerSbService {\n  private players: PlayerModel[] =[];\n  constructor(private httpClient: HttpClient) { }\n\n\n  restGetPlayers(): Observable<PlayerModel[]>{\n    return this.httpClient.get<PlayerModel[]>(`http://localhost:8082/player`)\n      .pipe(\n        map(responseData => {\n          const playerArray: PlayerModel[] = [];\n\n          for (const key in responseData){\n            playerArray.push(responseData[key])\n          }\n          return playerArray\n        })\n      )\n  }\n\n  restGetPlayerId(name: String){\n    this.httpClient.get<PlayerModel>('http://localhost:8082/player/returnId/{n}')\n  }\n\n  restPostPlayer(player: PlayerModel){\n    const body = {\n      \"name\": player.name\n    }\n    this.httpClient.post<PlayerModel>(`http://localhost:8082/player`, body, {\n      headers: new HttpHeaders(\n        {'Content-Type': 'application/json'}\n      ), responseType: 'json', observe: 'response'\n    }).subscribe(\n      responseData => {\n        console.log(responseData)\n      }\n\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TrackSbService",
            "id": "injectable-TrackSbService-1807cecc0dbf9d21f8679f96741f6ebd06a584b450c6d95eaa65e59a8394d9aa243708f5742e568b04a6dd743d96f58f8492d2dd805e85d750b94e312e30fe76",
            "file": "src/app/services/track-sb.service.ts",
            "properties": [
                {
                    "name": "tracks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackModel[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "determineIfPostOrPut",
                    "args": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "TrackModel[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restGetTracks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TrackModel[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restPostTrack",
                    "args": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restPutTrack",
                    "args": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "track",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ErrorHandler, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {TrackModel} from \"../models/track\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackSbService {\n  private tracks: TrackModel[] = [];\n  constructor(private httpClient: HttpClient) {\n    this.restGetTracks().subscribe(\n      responseData => this.tracks = responseData,\n      error => ErrorHandler.apply(error)\n    )\n  }\n\n  findAll(): TrackModel[]{\n    return this.tracks;\n  }\n\n  determineIfPostOrPut(track: TrackModel){\n    for (let i = 0; i < this.tracks.length; i++){\n      if (track.id == this.tracks[i].id){\n        this.restPostTrack(track)\n        return;\n      }\n      else this.restPostTrack(track)\n    }\n  }\n\n  restGetTracks(): Observable<TrackModel[]>{\n    return this.httpClient.get<TrackModel[]>(`http://localhost:8082/track`)\n      .pipe(\n        map(responseData => {\n          const trackArray: TrackModel[] = [];\n\n          for (const key in responseData){\n            trackArray.push(responseData[key])\n          }\n          return trackArray;\n        })\n      )\n  }\n\n  restPostTrack(track: TrackModel){\n    this.httpClient.post<TrackModel>('http://localhost:8082/track', JSON.stringify(track), {headers: new HttpHeaders(\n        {'Content-Type': 'application/json',\n        }\n      ), responseType: 'json', observe: 'response'}).subscribe(responseData => {\n      console.log(responseData)\n    })\n  }\n\n  restPutTrack(track: TrackModel){\n    return this.httpClient.put<TrackModel>(`http://localhost:8082/track/${track.id}`, track, {headers: new HttpHeaders(\n        {'Content-Type': 'application/json'}\n      ), responseType: 'json', observe: 'response'\n    }).subscribe(\n      responseData =>{\n        console.log(responseData)\n      }\n    )\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7dfb59ccfb66719ee677a965c1e91fef860df69655ab9b95a7e49bbde2ce46b93aec53edc06f8002f92ec14f013b40c45890fa963e898d6e90cde549981fc8ab",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'racescoreboard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'racescoreboard';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "*{\r\n  font-family: \"Courier New\", sans-serif;\r\n  color: white;\r\n}\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<app-courseselector></app-courseselector>\n<router-outlet></router-outlet>\n\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CourseselectorComponent",
            "id": "component-CourseselectorComponent-a84b3dadea98da25800f7ddc3085e91feb30dc02a0353e6a6b4737e412f90e5021dcdd9782ba5ed39cb8bb60efe892e73c47656b3555dd08962b0482e93bebba",
            "file": "src/app/courseselector/courseselector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-courseselector",
            "styleUrls": [
                "./courseselector.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./courseselector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_selectedTrack",
                    "defaultValue": "{\n    id: 0,\n    name: 'example',\n    location: \"example\",\n    length: 0,\n    entryList: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackModel",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "entryForm",
                    "defaultValue": "new FormGroup({\n    playername: new FormControl(''),\n    entrytime: new FormControl(''),\n    car: new FormControl<CarModel | undefined | null>({\n      id: 0, name: \"\"\n    }),\n    track: new FormControl<TrackModel | undefined | null>({\n      id: 0, name: \"\", location: \"\", length: 0, entryList: []\n    })\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "submitEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntryModelPostForm",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "toBeInsertedDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedTrack",
                    "args": [
                        {
                            "name": "value",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "TrackModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Inject, Input} from '@angular/core';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {EntryserviceService} from '../services/entryservice.service';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {EntrySbService} from \"../services/entry-sb.service\";\nimport {CarSbService} from \"../services/car-sb.service\";\nimport {TrackSbService} from \"../services/track-sb.service\";\nimport {CarModel} from \"../models/car\";\nimport {TrackModel} from \"../models/track\";\nimport {EntryModel, EntryModelPostForm} from \"../models/entry\";\n\n@Component({\n  selector: 'app-courseselector',\n  templateUrl: './courseselector.component.html',\n  styleUrls: ['./courseselector.component.css']\n})\nexport class CourseselectorComponent {\n\n  private _selectedTrack: TrackModel = {\n    id: 0,\n    name: 'example',\n    location: \"example\",\n    length: 0,\n    entryList: [],\n  }\n\n  submitEntry!: EntryModelPostForm;\n  toBeInsertedDate: Date = new Date();\n\n\n\n  entryForm = new FormGroup({\n    playername: new FormControl(''),\n    entrytime: new FormControl(''),\n    car: new FormControl<CarModel | undefined | null>({\n      id: 0, name: \"\"\n    }),\n    track: new FormControl<TrackModel | undefined | null>({\n      id: 0, name: \"\", location: \"\", length: 0, entryList: []\n    })\n  })\n\n\n  constructor(private entryService: EntryserviceService,\n              private entrySbService: EntrySbService,\n              private trackSbService: TrackSbService,\n              private carSbService: CarSbService) {\n  }\n\n  get carList(): CarModel[]{\n    return this.carSbService.findAll()\n  }\n\n  get trackList(): TrackModel[]{\n    console.log(this.trackSbService.findAll())\n    return this.trackSbService.findAll()\n  }\n\n  get selectedTrack(): TrackModel {\n    return this._selectedTrack;\n  }\n\n  setSelectedTrack(value: TrackModel) {\n    this._selectedTrack = value;\n  }\n\n  onSubmit() {\n    let toBeFormattedTime = this.entryForm.value.entrytime?.split(\":\", 3);\n    let entryTimeString = toBeFormattedTime![0] + toBeFormattedTime![1] + toBeFormattedTime![2];\n\n    this.submitEntry = ({\n      id: 0,\n      entryTime: parseInt(entryTimeString),\n      date: new Date(),\n      car: this.entryForm.value.car,\n      score: 0,\n      player: {\n        name: this.entryForm.value.playername!,\n      },\n      track: {\n        id: this.entryForm.value.track!.id\n      }\n    } as EntryModelPostForm)\n\n    this.entrySbService.restPostEntry(this.submitEntry)\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "*{\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.container{\r\n  text-align: center;\r\n  background-color: #5F6F94;\r\n}\r\n\r\nul{\r\n  display: flex;\r\n  justify-content: center;\r\n  list-style-type: none;\r\n}\r\nli{\r\n  padding: 10px;\r\n  align-content: center;\r\n  align-items: center;\r\n}\r\nbutton{\r\n  justify-content: center;\r\n  margin-top: 0.25rem;\r\n  background-color: #97D2EC;\r\n  font-family: \"Courier New\", sans-serif;\r\n  color: white;\r\n  border-color: cornflowerblue;\r\n  border-radius: 10px;\r\n\r\n}\r\n.track-selector{\r\n  float: right;\r\n  align-content: end;\r\n  align-items: end;\r\n  align-self: end;\r\n  justify-content: end;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./courseselector.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entryService",
                        "type": "EntryserviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entrySbService",
                        "type": "EntrySbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "trackSbService",
                        "type": "TrackSbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "carSbService",
                        "type": "CarSbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "entryService",
                        "type": "EntryserviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entrySbService",
                        "type": "EntrySbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trackSbService",
                        "type": "TrackSbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "carSbService",
                        "type": "CarSbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "carList": {
                    "name": "carList",
                    "getSignature": {
                        "name": "carList",
                        "type": "[]",
                        "returnType": "CarModel[]",
                        "line": 50
                    }
                },
                "trackList": {
                    "name": "trackList",
                    "getSignature": {
                        "name": "trackList",
                        "type": "[]",
                        "returnType": "TrackModel[]",
                        "line": 54
                    }
                },
                "selectedTrack": {
                    "name": "selectedTrack",
                    "getSignature": {
                        "name": "selectedTrack",
                        "type": "",
                        "returnType": "TrackModel",
                        "line": 59
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <form [formGroup]=\"entryForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\" id=\"entry-form\">\n    <ul>\n      <li>\n        <mat-form-field appearance=\"fill\">\n          <mat-label for=\"car\">Selecteer je auto</mat-label>\n          <mat-select id=\"car\" formControlName=\"car\">\n            <mat-option *ngFor=\"let car of carList\" [value]=\"car\">{{car.name}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <p></p>\n      </li>\n      <li>\n        <mat-form-field appearance=\"fill\">\n          <mat-label for=\"track\">Selecteer de track</mat-label>\n          <mat-select id=\"track\" formControlName=\"track\">\n            <mat-option *ngFor=\"let track of trackList\" [value]=\"track\" (click)=\"setSelectedTrack(track)\">{{track.name}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </li>\n      <li>\n        <mat-form-field appearance=\"fill\">\n          <mat-label for=\"date\">\n            Vul je tijd in (1:07:276)\n          </mat-label>\n          <input matInput id=\"entrytime\" maxlength=\"9\" formControlName=\"entrytime\">\n        </mat-form-field>\n      </li>\n      <li>\n        <mat-form-field appearance=\"fill\">\n          <mat-label for=\"playername\">\n            Naam\n          </mat-label>\n          <input matInput id=\"playername\" formControlName=\"playername\">\n        </mat-form-field>\n      </li>\n      <li>\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!entryForm\">Entry toevoegen</button>\n      </li>\n    </ul>\n  </div>\n  </form>\n<app-listpage [selectedTrack]=\"selectedTrack\"></app-listpage>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3e4b746fe7dd91d7c8682668500d7e396687e4dd96e937dcdcda0b00213401ef71f0e2adaa1f924df54ed641b1729f2b808fd827fde8f111cf6cfb63cd983fab-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "*{\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.container{\r\n  text-align: center;\r\n  height: 200px;\r\n\r\n}\r\n.header, h1{\r\n  font-family: \"Courier New\", sans-serif;\r\n  font-size: 40px;\r\n  background-color: #25316D;\r\n}\r\np{\r\n  font-size: 16px;\r\n  color: black;\r\n  background-color: #FEF5AC;\r\n}\r\n\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"container\">\n  <div class=\"header\">\n    <h1>Abovo Racing Leaderboard</h1>\n    <p>Scoreboard is used by the abovo media team</p>\n  </div>\n</div>\n\n\n\n"
        },
        {
            "name": "ListpageComponent",
            "id": "component-ListpageComponent-73c6f54e60df09e14ad9ea65eebf3f969f8742c90722308846a39ed4569df99757335f21dbfcb8fa56bb7dc69528c23bf3129ba915066558399850b04b92604a",
            "file": "src/app/listpage/listpage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-listpage",
            "styleUrls": [
                "./listpage.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./listpage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedTrack",
                    "defaultValue": "{\n    id: 0,\n    name: 'example',\n    location: \"example\",\n    length: 0,\n    entryList: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "TrackModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntryModel[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "formattedDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedCar",
                    "defaultValue": "{\n    id: 0,\n    name: \"car\",\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarModel",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "filterBasedByCar",
                    "args": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "CarModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, Input, OnInit} from '@angular/core';\nimport {TrackModel} from '../models/track';\nimport { EntryserviceService } from '../services/entryservice.service';\nimport {EntryModel} from \"../models/entry\";\nimport {CarModel} from \"../models/car\";\nimport {CarSbService} from \"../services/car-sb.service\";\nimport {filter} from \"rxjs\";\n\n@Component({\n  selector: 'app-listpage',\n  templateUrl: './listpage.component.html',\n  styleUrls: ['./listpage.component.css']\n})\nexport class ListpageComponent implements OnInit, AfterViewInit{\n  @Input() selectedTrack: TrackModel = {\n    id: 0,\n    name: 'example',\n    location: \"example\",\n    length: 0,\n    entryList: [],\n  };\n\n  selectedCar: CarModel = {\n    id: 0,\n    name: \"car\",\n  }\n\n  formattedDate: Date = new Date();\n\n  entries: EntryModel[] = [];\n\n\n\n  constructor(private entryService: EntryserviceService, private carSbService: CarSbService) {\n    this.entries = [...this.selectedTrack.entryList]\n\n  }\n\n  filterBasedByCar(car: CarModel){\n    // let newArray = this.selectedTrack.entryList.filter((entry)=>{\n    //   return entry.car.id = car.id;\n    // }).map((entry)=>{\n    //   return entry\n    // })\n    let filteredEntries: EntryModel[] =[]\n    // filteredEntries = this.selectedTrack.entryList.filter((entry) =>{\n    //   return entry.car.id = entry.car.id\n    // });\n    console.log(filteredEntries)\n\n    for (let i = 0; i < this.selectedTrack.entryList.length; i++) {\n      if (this.selectedTrack.entryList[i].car.id == car.id){\n        filteredEntries.push(this.selectedTrack.entryList[i])\n      }\n    }\n\n    this.selectedTrack.entryList = filteredEntries\n  }\n\n\n  get carList(): CarModel[]{\n    return this.carSbService.findAll()\n  }\n\n\n\n  ngAfterViewInit() {\n    this.entries = [...this.selectedTrack.entryList];\n  }\n\n  ngOnInit(): void {\n    this.entries = [...this.selectedTrack.entryList];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.container {\r\n  background-color: #5F6F94;\r\n  font-family: \"Courier New\", sans-serif;\r\n  color: white;\r\n  font-size: 16px;\r\n  overflow: hidden;\r\n}\r\n\r\nh2 {\r\n  padding-left: 1.7rem;\r\n}\r\n\r\ntable {\r\n  padding-left: 30px;\r\n}\r\n\r\n.filter-box, ul {\r\n  justify-content: start;\r\n  align-items: start;\r\n  display: flex;\r\n  list-style-type: none;\r\n  padding: 0.5rem;\r\n}\r\n\r\nli {\r\n  padding: 0.5rem;\r\n}\r\n\r\ntr {\r\n  text-align: left;\r\n  background-color: #97D2EC;\r\n\r\n  padding-bottom: 5px;\r\n}\r\n\r\ntr:hover {\r\n  background: #619fba;\r\n}\r\n\r\nth {\r\n  padding: 10px;\r\n}\r\n\r\n.submit-box {\r\n  padding-right: 0.6rem;\r\n  padding-bottom: 0.4rem;\r\n  justify-content: center;\r\n  float: right;\r\n\r\n}\r\n\r\n.header-icons {\r\n  position: absolute;\r\n  padding-left: 5px;\r\n}\r\n\r\n",
                    "styleUrl": "./listpage.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entryService",
                        "type": "EntryserviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "carSbService",
                        "type": "CarSbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "entryService",
                        "type": "EntryserviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "carSbService",
                        "type": "CarSbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "carList": {
                    "name": "carList",
                    "getSignature": {
                        "name": "carList",
                        "type": "[]",
                        "returnType": "CarModel[]",
                        "line": 61
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <h2>Tijden op {{selectedTrack.name}}</h2>\n  <div class=\"filter-box\">\n    <ul>\n      <li>\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Week</mat-label>\n          <mat-select>\n            <mat-option value=\"one\">Week 1</mat-option>\n            <mat-option value=\"two\">Week 2</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </li>\n      <li>\n        <mat-form-field appearance=\"fill\">\n        <mat-label>Filter op auto</mat-label>\n        <mat-select>\n          <mat-option *ngFor=\"let car of carList\" [value]=\"car.id\" (click)=\"filterBasedByCar(car)\">{{car.name}}</mat-option>\n        </mat-select>\n        </mat-form-field>\n      </li>\n    </ul>\n  </div>\n\n  <table>\n    <tr>\n      <th>Ranking</th>\n      <th>Tijd</th>\n      <th>Naam</th>\n      <th>Punten</th>\n      <th>Datum</th>\n      <th>Auto</th>\n    </tr>\n    <tr *ngFor=\"let entry of this.selectedTrack.entryList; let i = index\">\n      <th>{{i + 1}}</th>\n      <th>{{entry?.entryTime}}</th>\n      <th>{{entry.player?.name || 'John Doe'}}</th>\n      <th></th>\n      <th>{{entry.date | date: 'dd-mm-yyyy' }}</th>\n      <th>{{entry.car?.name || 'MadLad'}}</th>\n    </tr>\n  </table>\n\n  <div class=\"submit-box\">\n    <button mat-raised-button color=\"primary\">Ronde indienen</button>\n    <button mat-icon-button><mat-icon>more_vert</mat-icon></button>\n  </div>\n\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-330b7da08456c928df89f58cad59c6ffcf7e1e3d4614242a877b8890b21e598fb3e73b6526a6ab9b3e23fc569c60092f421754f7227cc84ccb6c4c405e23dd61",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListpageComponent } from './listpage/listpage.component';\nimport { HeaderComponent } from './header/header.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CourseselectorComponent } from './courseselector/courseselector.component';\nimport {MatFormFieldModule} from '@angular/material/form-field'\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatRippleModule} from '@angular/material/core';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\"\nimport { CommonModule } from '@angular/common';\nimport {HttpClientModule} from \"@angular/common/http\";\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListpageComponent,\n    HeaderComponent,\n    CourseselectorComponent,\n\n  ],\n  exports: [\n    CommonModule\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatRippleModule,\n    MatDialogModule,\n    MatInputModule,\n    MatIconModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CourseselectorComponent"
                        },
                        {
                            "name": "ListpageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyCj5gpH3z9KttLmlHsm-COdkd4WRbu7WjY\",\n    authDomain: \"racescoreboard.firebaseapp.com\",\n    projectId: \"racescoreboard\",\n    storageBucket: \"racescoreboard.appspot.com\",\n    messagingSenderId: \"130220978152\",\n    appId: \"1:130220978152:web:0cb54f775d4b279e717e5d\"\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "EntryModelPost",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/models/entry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "EntryModelPostForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/models/entry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "PlayerModelPost",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/models/player.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TrackModelPost",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/models/track.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyCj5gpH3z9KttLmlHsm-COdkd4WRbu7WjY\",\n    authDomain: \"racescoreboard.firebaseapp.com\",\n    projectId: \"racescoreboard\",\n    storageBucket: \"racescoreboard.appspot.com\",\n    messagingSenderId: \"130220978152\",\n    appId: \"1:130220978152:web:0cb54f775d4b279e717e5d\"\n  }\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/models/entry.ts": [
                {
                    "name": "EntryModelPost",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/models/entry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "EntryModelPostForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/models/entry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/models/player.ts": [
                {
                    "name": "PlayerModelPost",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/models/player.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/models/track.ts": [
                {
                    "name": "TrackModelPost",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/models/track.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/courseselector/courseselector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseselectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/listpage/listpage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListpageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/car.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/entry.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EntryModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/player.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/track.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TrackModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/car-sb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CarSbService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/entry-sb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EntrySbService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/entryservice.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EntryserviceService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/player-sb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlayerSbService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/track-sb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TrackSbService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}